{
	"info": {
		"_postman_id": "chat-app-api-collection",
		"name": "Chat App API",
		"description": "Complete API collection for testing the chat application with WebSocket support and message encryption",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data._id) {",
									"        pm.environment.set('user1_id', response.data._id);",
									"        pm.environment.set('user1_token', response.data.token);",
									"        console.log('User 1 registered with ID:', response.data._id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\",\n  \"password\": \"Password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/user/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data._id) {",
									"        pm.environment.set('user2_id', response.data._id);",
									"        pm.environment.set('user2_token', response.data.token);",
									"        console.log('User 2 registered with ID:', response.data._id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Jane Smith\",\n  \"email\": \"jane@example.com\",\n  \"password\": \"Password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/user/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data.token) {",
									"        pm.environment.set('user1_token', response.data.token);",
									"        console.log('User 1 logged in successfully');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"john@example.com\",\n  \"password\": \"Password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/user/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data.token) {",
									"        pm.environment.set('user2_token', response.data.token);",
									"        console.log('User 2 logged in successfully');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"jane@example.com\",\n  \"password\": \"Password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/user/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			],
			"description": "User authentication endpoints for registration and login"
		},
		{
			"name": "Messages",
			"item": [
				{
					"name": "Send Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data._id) {",
									"        pm.environment.set('last_message_id', response.data._id);",
									"        console.log('Message sent with ID:', response.data._id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"receiver\": \"{{user2_id}}\",\n  \"content\": \"Hello Jane! This is a test message from John.\",\n  \"messageType\": \"text\",\n  \"mediaUrl\": \"https://example.com/image.jpg\",\n  \"replyTo\": null\n}"
						},
						"url": {
							"raw": "{{base_url}}/message/send?userId={{user1_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"message",
								"send"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{user1_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Conversation",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/message/conversation?userId={{user1_id}}&receiver={{user2_id}}&page=1&limit=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"message",
								"conversation"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{user1_id}}"
								},
								{
									"key": "receiver",
									"value": "{{user2_id}}"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mark Message as Read",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"messageId\": \"{{last_message_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/message/read?userId={{user2_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"message",
								"read"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{user2_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Message",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"messageId\": \"{{last_message_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/message/delete?userId={{user1_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"message",
								"delete"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{user1_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Conversations List",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/message/conversations?userId={{user1_id}}&page=1&limit=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"message",
								"conversations"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{user1_id}}"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Unread Count",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/message/unread-count?userId={{user2_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"message",
								"unread-count"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{user2_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Message-related endpoints for sending, retrieving, and managing messages"
		},
		{
			"name": "Error Testing",
			"item": [
				{
					"name": "Register with Invalid Email",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test User\",\n  \"email\": \"invalid-email\",\n  \"password\": \"Password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/user/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register with Weak Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test User\",\n  \"email\": \"test@example.com\",\n  \"password\": \"123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/user/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Message without UserId",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"receiver\": \"{{user2_id}}\",\n  \"content\": \"Hello without userId\",\n  \"messageType\": \"text\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/message/send",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"message",
								"send"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Message to Invalid Receiver",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"receiver\": \"507f1f77bcf86cd799439011\",\n  \"content\": \"Hello to invalid user\",\n  \"messageType\": \"text\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/message/send?userId={{user1_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"message",
								"send"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{user1_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Someone Else's Message",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"messageId\": \"{{last_message_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/message/delete?userId={{user2_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"message",
								"delete"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{user2_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Error testing scenarios to verify validation and error handling"
		},
		{
			"name": "WebSocket Testing",
			"item": [
				{
					"name": "API Health Check & WebSocket Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "API health check and WebSocket connection information"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request script to set up environment",
					"console.log('Running pre-request script...');",
					"console.log('Base URL:', pm.environment.get('base_url'));",
					"console.log('User 1 ID:', pm.environment.get('user1_id'));",
					"console.log('User 2 ID:', pm.environment.get('user2_id'));"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"console.log('Response Status:', pm.response.status);",
					"console.log('Response Time:', pm.response.responseTime + 'ms');",
					"",
					"// Check if response is valid JSON",
					"try {",
					"    const response = pm.response.json();",
					"    console.log('Response Success:', response.success);",
					"    console.log('Response Message:', response.message);",
					"} catch (e) {",
					"    console.log('Response is not JSON');",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5000/api",
			"type": "string"
		},
		{
			"key": "user1_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "user2_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "user1_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user2_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "last_message_id",
			"value": "",
			"type": "string"
		}
	]
} 